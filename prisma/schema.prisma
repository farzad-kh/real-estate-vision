datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id               String     @id @default(auto()) @map("_id") @db.ObjectId
    name             String?
    hashedPassword   String?
    email            String?    @unique
    emailVerified    DateTime?
    image            String?
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    Account          Account[]
    Property         Property[]
    bookmark         Bookmark[]
    sentMessages     Message[]  @relation(name: "SenderRelation")
    receivedMessages Message[]  @relation(name: "OwnerRelation")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    token_type        String?
    refresh_token     String? @db.String
    access_token      String? @db.String
    id_token          String? @db.String
    scope             String?
    session_state     String?
    expires_at        Int?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId

    @@unique([provider, providerAccountId])
}

model Property {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    type        String
    description String?
    user        User        @relation(fields: [userId], references: [id])
    userId      String      @db.ObjectId
    location    Location?
    bedrooms    Int?
    bathrooms   Int?
    square_cm   Int?        @map("square_cm")
    sleeps      Int?
    amenities   String[]
    rates       Rates?
    rules       Rules
     
    images      String[]    @default([])
    is_featured Boolean     @default(false) @map("is_featured")
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    bookmark    Bookmark[]
    Message     Message[]
}

type Location {
    country String
    street  String
    city    String
    state   String
    zipcode String
}

model Bookmark {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    user       User     @relation(fields: [userId], references: [id])
    userId     String   @db.ObjectId
    property   Property @relation(fields: [propertyId], references: [id])
    propertyId String   @db.ObjectId
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([userId, propertyId])
}

type Rates {
    night Int @default(0)
    week  Int @default(0)
    month Int @default(0)
}

 

type Phone {
    code   String
    number String
}

type Rules {
    pets     Boolean  @default(false)
    children Boolean  @default(false)
    smoking  Boolean  @default(false)
    events   Boolean  @default(false)
    checkIn  DateTime @default(now())
    checkOut DateTime @default(now())
}

model Message {
    id           String    @id @default(auto()) @map("_id") @db.ObjectId
    sender       User      @relation(name: "SenderRelation", fields: [senderId], references: [id])
    senderId     String    @db.ObjectId
    owner        User      @relation(name: "OwnerRelation", fields: [ownerId], references: [id])
    ownerId      String    @db.ObjectId
    property     Property  @relation(fields: [propertyId], references: [id])
    propertyId   String    @db.ObjectId
    name         String
    email        String
    phone        Phone
    text         String?
    deleted      Boolean   @default(false)
    readByOwner  Boolean   @default(false)
    readBySender Boolean   @default(false)
    readAt       DateTime?
    notified     Boolean   @default(false)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}
